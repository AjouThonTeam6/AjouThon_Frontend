{"ast":null,"code":"import * as React from 'react';\nimport { shouldThrowError } from './utils.mjs';\nconst ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nconst useClearResetErrorBoundary = errorResetBoundary => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nconst getHasError = _ref => {\n  let {\n    result,\n    errorResetBoundary,\n    useErrorBoundary,\n    query\n  } = _ref;\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(useErrorBoundary, [result.error, query]);\n};\nexport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary };","map":{"version":3,"names":["ensurePreventErrorBoundaryRetry","options","errorResetBoundary","suspense","useErrorBoundary","isReset","retryOnMount","useClearResetErrorBoundary","React","useEffect","clearReset","getHasError","_ref","result","query","isError","isFetching","shouldThrowError","error"],"sources":["/Users/woohyun/AjouThon_Frontend/ajouthon/node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts"],"sourcesContent":["import type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n"],"mappings":";;MAWaA,+BAA+B,GAAGA,CAO7CC,OAP6C,EAc7CC,kBAd6C,KAe1C;EACH,IAAID,OAAO,CAACE,QAAR,IAAoBF,OAAO,CAACG,gBAAhC,EAAkD;IAChD;IACA,IAAI,CAACF,kBAAkB,CAACG,OAAnB,EAAL,EAAmC;MACjCJ,OAAO,CAACK,YAAR,GAAuB,KAAvB;IACD;EACF;AACF;AAEY,MAAAC,0BAA0B,GACrCL,kBADwC,IAErC;EACHM,KAAK,CAACC,SAAN,CAAgB,MAAM;IACpBP,kBAAkB,CAACQ,UAAnB;GADF,EAEG,CAACR,kBAAD,CAFH;AAGD;AAEM,MAAMS,WAAW,GAAGC,IAAA,IAqBrB;EAAA,IAfJ;IACAC,MADA;IAEAX,kBAFA;IAGAE,gBAHA;IAIAU;EAJA,CANyB,GAAAF,IAAA;EAsBzB,OACEC,MAAM,CAACE,OAAP,IACA,CAACb,kBAAkB,CAACG,OAAnB,EADD,IAEA,CAACQ,MAAM,CAACG,UAFR,IAGAC,gBAAgB,CAACb,gBAAD,EAAmB,CAACS,MAAM,CAACK,KAAR,EAAeJ,KAAf,CAAnB,CAJlB;AAMD"},"metadata":{},"sourceType":"module","externalDependencies":[]}