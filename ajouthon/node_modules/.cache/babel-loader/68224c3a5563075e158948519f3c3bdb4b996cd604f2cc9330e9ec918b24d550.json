{"ast":null,"code":"import { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs';\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    var _this$currentMutation;\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n  }\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation2;\n      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n    this.notify(notifyOptions);\n  }\n  getCurrentResult() {\n    return this.currentResult;\n  }\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n  mutate(variables, options) {\n    this.mutateOptions = options;\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n}\nexport { MutationObserver };","map":{"version":3,"names":["MutationObserver","Subscribable","constructor","client","options","setOptions","bindMethods","updateResult","mutate","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","listeners","length","_this$currentMutation2","removeObserver","onMutationUpdate","action","notifyOptions","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","notifyManager","batch","hasListeners","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","listener"],"sources":["/Users/woohyun/AjouThon_Frontend/ajouthon/node_modules/@tanstack/query-core/src/mutationObserver.ts"],"sourcesContent":["import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}